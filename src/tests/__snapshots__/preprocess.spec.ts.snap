// Vitest Snapshot v1

exports[`svelte-preprocess-react > should inject a script tag 1`] = `
"<script>
import { createElement as React$$createElement} from \\"react\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; import React$$sveltify from \\"svelte-preprocess-react/sveltifyReact\\"; 

const React$Counter = React$$sveltify(Counter, React$$createElement, React$$ReactDOM, React$$renderToString);
</script>

<!-- Counter could be a global variable -->
<React$Counter />
"
`;

exports[`svelte-preprocess-react > should portal slotted content as children 1`] = `
"<script>import { createElement as React$$createElement} from \\"react\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; import React$$sveltify from \\"svelte-preprocess-react/sveltifyReact\\"; 
  import Alert from \\"../../demo/react-components/Alert\\";

  if (!Alert) {
    // Bypass: 'Alert' is declared but its value is never read. (ts)
  }
const React$Alert = React$$sveltify(Alert, React$$createElement, React$$ReactDOM, React$$renderToString);</script>

<React$Alert>A simple primary alertâ€”check it out!</React$Alert>
"
`;

exports[`svelte-preprocess-react > should process <react:component> tags 1`] = `
"<script>import { createElement as React$$createElement} from \\"react\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; import React$$sveltify from \\"svelte-preprocess-react/sveltifyReact\\"; 
  // @ts-nocheck
  import Clicker from \\"./Clicker\\";

  let count = 1;
const React$Clicker = React$$sveltify(Clicker, React$$createElement, React$$ReactDOM, React$$renderToString);</script>

<React$Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
/>
"
`;

exports[`svelte-preprocess-react > should process <react:component> tags 2`] = `
"<script>import { createElement as React$$createElement} from \\"react\\"; import React$$ReactDOM from \\"react-dom/client\\"; import { renderToString as React$$renderToString } from \\"react-dom/server\\"; import React$$sveltify from \\"svelte-preprocess-react/sveltifyReact\\"; 
  // @ts-nocheck
  import Clicker from \\"./Clicker\\";

  let count = 1;
const React$Clicker = React$$sveltify(Clicker, React$$createElement, React$$ReactDOM, React$$renderToString);</script>

<h2>prop and event</h2>
<React$Clicker
  {count}
  onCount={(next) => {
    count = next;
  }}
/>
<h2>prop and Prop event</h2>
<React$Clicker
  count={10}
  onCount={() => {
    console.info(\\"count\\");
  }}
/>
<h2>prop</h2>
<React$Clicker {count} />
<h2>.</h2>
<React$Clicker />
"
`;

exports[`svelte-preprocess-react > should support typescript when using preprocess 1`] = `
"<script lang=\\"ts\\">export let title;
</script>

<h1>{title}</h1>
"
`;
